import React, { useEffect, useState, useRef } from 'react';
// import './App.css';  
import { mobiwekMenuJSONexample_1 } from "./MobiWekDemo_exampleMenu"

import { BrowserRouter, Route, Routes, Outlet, useParams, useLocation } from "react-router-dom";
import { PopupDebugShowsQRandCmdLine } from './util/PopupDebugShowsQRandCmdLine'
import { findJsonObjectByFullPath, findJsonObjectByKeyNameAndValue, validateMwMenu } from './mobiwekMenu/mobiwekUtils'
import './mobiwekMenu/mobiwekMenu.css'
import { MediaPictureWithInfo } from './mobiwekView/MediaPictureWithInfo'
import { MobiWekMenuFrame } from './mobiwekMenu/mobiwekMenuFrameHelper';
import { useNavigate } from "react-router-dom";
import { MobiWekPageWrapper } from "./mobiwekView/MobiWekPageWrapper"

/* WARNING: react-router-dom < V.6 crashes. See note at end of this file */

/**
 * gets called by index.js
 * @returns component with entire app
 */
function MobiWekDemo() {
  const [isOpenModalQRhelper, setIsOpenModalQRhelper] = useState(false);
  /* !!! useEffect() !!! huh?
     In the React world "useEffect" is a lifecycle function. Controlled by argument 2.
     missing: run always;  [] empty: run only once when component mounts; [foo] run when useState foo changes */
  useEffect(() => {  
    // console.log('MobiWekDemo mounted') 
  }, []); 
  // SET MENU HERE 
  const theMobiwekMenu = mobiwekMenuJSONexample_1
  var errorJSX = validateMwMenu(theMobiwekMenu)
  if (errorJSX !== null) return(errorJSX) 
  var cssVariableFromCSSfile_fontsizeA = // get "css variable" using getComputedStyle()
        getComputedStyle(document.body).getPropertyValue('--fontSizeA')
  return (
    <BrowserRouter>
      <Routes>
          <Route path='/' // this route always taken. Serves as menu frame for content
              //       ^ all routes hit this one because its /
              element=
                  {<div id='reactRouterTopRoute' className='eatZoomGesture'
                        style={{ fontSize:cssVariableFromCSSfile_fontsizeA}} >
                      {/* 
                      Below is the top level div of menu. Encompasses the entire screen but is transparent
                      so below content is visible. Hamburger button always visible with high zIndex.
                      Rest of menu hidden (display='none'). When visible it has a high zIndex so it floats
                      over the screen, and code keeps active submenus centered.
                      Outlet is result of nested paths and is passed to component and gets
                      displayed a few levels down */}
                      <MASTER_MOBIWEKMENU_COMPONENT mwmenuRoot={theMobiwekMenu}  pageContent=<Outlet/> />
                      {/* SAVE AS EXAMPLE below is usually-hidden dialog for debugging/development */}
                      <PopupDebugShowsQRandCmdLine 
                          isVisible={ isOpenModalQRhelper } 
                          callBackCloseMe={(isOpen)=> { setIsOpenModalQRhelper(isOpen) } } />
                      
                  </div>} 
          >
            <Route path='qrCode' 
                element={<PopupDebugShowsQRandCmdLine 
                  isVisible={ true } 
                  callBackCloseMe={null} />}
            />
            {/* Note: need "()"", and dont use form <SetupRoutes/> cause its not a JSX 
                This is how to insert lots of routes without code clutter */}
            { SetupRoutes_A() }

        </Route> {/*  <Route path='/' */}
      </Routes>
    </BrowserRouter>
  );

  // const SetupRoutes = () => {
  function SetupRoutes_A() {
    return(<>
    <Route path='*' // this wildcard route gets hit only when no other sibling routes get hit
    // forwards to handler which obtains matching menu entry in theMobiwekMenu tree and goes from there
    element={<HandleByFullPathToFindMenuEntry mwmenuRoot={theMobiwekMenu} />} 
    />
    <Route path='amhistory' element={<Outlet/>} >
    <Route path='aircraft/experimental/:itemKey' 
    element={ // enclosing div messes up image scaling...best use it for html or text../jpeg/hist
            //<div className='blockyMsg' style={{border:'6px solid #ffff00', marginTop:'20vh'}} >
            <Aircraft/> 
            //</div>
        }  
    />
    <Route path='aircraft/:itemKey' element={ <Aircraft/> }  
    />
    </Route>
    <Route path='x15/:itemKey' // matches http:1.2.3.4/x15/x15 and ..x15/x15image
    element={ <Aircraft/>}  />
    <Route path='LibCongress' // matches http:1.2.3.4/LibCongress/picts/zzzz/yyyy/aaaaa
    // element={<div style={{ marginTop:'20vh'}}>"path for LibCongress" <Outlet /></div>} 
    element={<Outlet/>}
    >
    <Route path='picts/:artist/:mwmkey' // matches http:1.2.3.4/LibCongress/picts/winslowHomer/winslowHomerFogWarning
    // ignore artist and mmwmkey and send to hander which examines FULL path
    element={<HandleByFullPathToFindMenuEntry mwmenuRoot={theMobiwekMenu}/>}  
    />
    </Route>

    <Route path='tomorrowSoup' element={<>tomorrowSoup here <Outlet /></>} >
    <Route path=':choice' element={<TomorrowSoup />} />
    </Route>

    {/* below route demonstrates a 2-level path and a default for anything not 2 level  */}
    <Route path='workshopTools' 
    element={<div className='blockyMsg' style={{marginTop:'20vh'}} >
          path "workshopTools" Outlet:
          <div style={{border:'6px dashed red'}}> <Outlet /></div></div>} >
    <Route path='*' element={<>wildcard route * </>} />
    {/*          ^ anything else ie:   workshopTools/power/saw/chainsaw */}
    <Route path=':ftype/:subtype' element={<Tools2level />} /> 
    {/*          ^ specifically two paths down ie: /workshopTools/power/drillPress */}
    </Route>

    <Route path='Coffee' element={<>Coffee route here</>} />
    <Route path='drinks' element={<>drinks here <Outlet /></>} >
    <Route path=':flavor/:size' element={<>drinks sub<DrinkDetail /></>} />
    <Route path=':flavor' element={<>drinks sub<DrinkDetail /></>} />
    </Route>
    <Route path='pictures/artist' element={<>pictures<Outlet /></>} >
    <Route path=':picname'  element={<DoPicture/>} />
    </Route>
    </>)
  }

  /** 1) Sets up mobiwekmenu whose branches and leaves are specified by props.mwmenuRoot
   *  2) Sets up callback function which gets invoked when a leaf is clicked.
   */
  function MASTER_MOBIWEKMENU_COMPONENT(props) {
    /* NOTE: React requires any component calling navigate() be a "router component". To be this it needs to
       be placed inside a <Route/> tag. Error occurs otherwise ie: useNavigate() is in a standard function. */
    const navigate = useNavigate();
    return(<>
      <MobiWekMenuFrame
          mobiwekMenuJSON_A={ props.mwmenuRoot }  
          menuCallBackPtr={ mobiWekDemoMenuCallbackFn }  
          {...props}     />
      </>)
    function mobiWekDemoMenuCallbackFn(mwmkeyFullPath, innerText, fontSearchUrlParam) {
          console.log('LEAF CLICKED--   mwmkey: ' + mwmkeyFullPath + ' label: ' +  innerText.replaceAll('\n', '\\n'))
          if (mwmkeyFullPath === 'resetMenu') mwmkeyFullPath = '/'
          if (mwmkeyFullPath === '/Home') mwmkeyFullPath = '/'
          //if (mwmkeyFullPath.indexOf('qrCode') !== -1) { setIsOpenModalQRhelper(true); } 
          // some selections may not want a navigate. ie: set font size....
          // var leafVal = mwmkeyFullPath.split(/\/\s?/).pop() // .slice(-1) works also instead of pop
          navigate(mwmkeyFullPath + fontSearchUrlParam); 
    }
  }
  
  /** note that this does not use JSX, instead it returns JSX functions */
  function Aircraft() {
      var zz = useParams();
      var fullUrlPath = useLocation().pathname;
      var mwmkeyLeaf = findJsonObjectByFullPath(theMobiwekMenu, fullUrlPath)
      if (mwmkeyLeaf.mwmtype === 'image') return MediaPictureWithInfo(mwmkeyLeaf) // picture link from x15 page
      if (zz.itemKey === 'x15')  // do a page for the x15...
          return MobiWekPageWrapper(page_x15_spaceplane(mwmkeyLeaf))
      if (zz.itemKey === 'spaceShuttleIntro')
          return MobiWekPageWrapper(Page_spaceShuttle(mwmkeyLeaf));
      return (<>ExperimentalAircraft no handler found</>)
  }

  

  function page_x15_spaceplane(mwmkeyLeaf) {
    return <div><h1>x15 Spaceplane</h1><br/>first winged vehicle designed to go outside the atmosphere<br/>
        <img style={{border: 'solid 5px white', borderRadius:'48px', margin:'5vw', width:'70vw' }} 
            src='/jpeg/hist/X-15_flying.jpg' alt='x15'
            onClick={() => { { window.location=mwmkeyLeaf.clickMeLink } }}
            //onClick={navigate(mwmkeyLeaf.clickMeLink)}
        /></div>
  }

  function Page_spaceShuttle(mwmkeyLeaf) {
    return <div>
        <h1>Space Shuttle</h1>
        First spacecraft designed with flying wings (maybe)<br/>
        <img style={{border: 'solid 5px white', borderRadius:'48px', margin:'5vw', width:'70vw' }} 
            src='/jpeg/hist/spaceShuttleOrbit.jpg' alt='space shuttle in orbit'
            onClick={() => { { window.location=mwmkeyLeaf.clickMeLink2 } }}
            //onClick={navigate(mwmkeyLeaf.clickMeLink)}
        /><br/>Space shuttle in orbit
        <img style={{border: 'solid 5px white', borderRadius:'48px', margin:'5vw', width:'70vw' }} 
            src='/jpeg/hist/spaceShuttleTransport.jpg' alt='space shuttle transported'
            onClick={() => { { window.location=mwmkeyLeaf.clickMeLink } }}
            //onClick={navigate(mwmkeyLeaf.clickMeLink)}
        /><br/>Space shuttle transported on 747
        </div>
  }

    function Tools2level() {
      var zz = useParams();
      return(<>Tools2level() example of sub-route. Processing <i>"path=':ftype/:subtype'"</i><br/> 
             ftype: {zz.ftype}<br/> subtype: {zz.subtype}</>)
    }

    /**
     * Router handler uses router full path to find matching menu entry in menu object.
     * todo: it then examines mwmtype of menu entry to direct to proper handler.
     * @param props.mwmenuRoot head of JSON menu structure to search for node having fullPath
     */
    function HandleByFullPathToFindMenuEntry(props) {
      // var fullUrlPath = useParams()["*"]; // works only for <Route path='*' element=...
      var fullUrlPath = useLocation().pathname 
      // SAVE to test error message: 
      // fullUrlPath = fullUrlPath + 'zzz' // to test things
      // fullUrlPath = 'LibCongress/pictszzzz/gwoodAmericanGothic'
      var mwmkeyLeaf = findJsonObjectByFullPath(props.mwmenuRoot, fullUrlPath)
      //console.log('found ' + mwmkeyLeaf.mwmkey + '  path ' + fullUrlPath)
      if (mwmkeyLeaf.error != undefined) {
          console.log('WARNING ' + fullUrlPath + ' path not found in menu JSON object')
          return(<span className='blockyMsg' ><br/> full path not found: { fullUrlPath } </span>)
      }
      // leaf may or may not have imgurl attrib
      if (mwmkeyLeaf.imgurl !== undefined) return MediaPictureWithInfo(mwmkeyLeaf)
      return(<div className='blockyMsg' style={{ gridArea:'1 / 1 / 2 / 2', marginTop:'20vh' }}>
        cannot find handler by full path and attributes in JSON. mwmkey: "{mwmkeyLeaf.mwmkey}"</div>)
      // return(<>DefaultPath {zz}</>)
    }

    function TomorrowSoup() {
      var zz = useParams();
      return(<>TomorrowSoup() choice: {zz.choice}</>)
    }      
    
    function DoPicture() {
      var zz = useParams();
      return(<> artist: {zz.artist} picname: {zz.picname}</>)
    }

    function DrinkDetail() {
      const { flavor } = useParams(); // one line using "deconstructing"
      const seashell = useParams();
      return (<>
        <div>DrinkDetail flavor: { flavor } also { seashell.flavor } </div>
        <div>..size: { (seashell.size) ? seashell.size : "blank" }</div></>
        );
    }
}

export default MobiWekDemo;

/* WARNING: this app needs react-router-dom V.6 or newer.
   "npm install react-router-dom --save"  to get latest version, or
   rely on entry in package.json & "npm install".
   Earlier versions produce runtime errors impossible to trace.
   To check that you have V.6 this should crash the app: import { Prompt } from "react-router-dom";
*/
/*
  ___ ___   _   ___ _____   _    ___ ___ ___ _____   _____ _    ___   __  __ ___ _____ _  _  ___  ___  ___ 
 | _ \ __| /_\ / __|_   _| | |  |_ _| __| __/ __\ \ / / __| |  | __| |  \/  | __|_   _| || |/ _ \|   \/ __|
 |   / _| / _ \ (__  | |   | |__ | || _|| _| (__ \ V / (__| |__| _|  | |\/| | _|  | | | __ | (_) | |) \__ \
 |_|_\___/_/ \_\___| |_|   |____|___|_| |___\___| |_| \___|____|___| |_|  |_|___| |_| |_||_|\___/|___/|___/
                                                                                                          
   * COMPONENT LIFECYCLE METHODS: react.js has lifecycle methods called by the framework
   * when a component first loads, another one every time it renders, another one every time
   * a useState() thing changes value, another when component unloads, and more.
   * Unlike other frameworks, REACT USES THE WORD "USEEFFECT" FOR "LIFECYCLE METHODS"
   * There are 3 react.js things it calls 'hook functions' used here for react function components:
   *    useState(), useRef() and useEffect.
   * Below is how they are used in this project, but are not complete descriptions:
   * 1. You code "useEffect" methods and the point it gets called in the component lifecycle
   *    is defined according to second array arg and return value [done this way probably to
   *    streamline code for those who code for it every day, but not for me, personally]. :
   *   + missing: run every time. Good for getting dimensions of window etc
   *   + [] empty: run only once when component mounts like componentDidMount
   *   + [aa, bb]: do only when aa or bb changes
   *   + [] empty and returns function: runs when component unmounts
   * 2. "useState" sets up a variable which perists between renders and queues a render when its value is changed.
   * 3. "useRef" lets you name a dom element and reference it in the code.
   */
  /* "If you’re familiar with React class lifecycle methods, you can think of useEffect Hook as componentDidMount, 
      componentDidUpdate, and componentWillUnmount combined" */

/* trash:


      / **
       * Creates 2 images from 2 url's, one for the initial image to show while the primary (hidden)
       * image loads, which may take a while. When loaded, swap CSS 'display' settings.
       * @param preloadImage small image displayed while primaryImage loads
       * @param primaryImage final image may take some time to load
       * /
      const CreateImgSwapLoad = (props) => {
        / * state variable keeps track of which image to hide or show depending on load status.
           Changing this variable causes a redraw, to reflect 'display' status. * /
        const [isLoaded, setIsLoaded] = useState(false);
        console.log('preload: ' + props.preload)
        return (<>
        {/ * "show me before next image loads, then set my display to 'none' which hides me"  * /}
            <img src={props.preload } 
                style={{ display: isLoaded ? "none" : "block", width:'90%'}} />
        {/ * "hide me before I load, then set my display to 'block' which shows me"  * /}
            <img src={props.src } 
                style={{ display: isLoaded ? "block" : "none", width:'90%'}}
                // when loaded, fire a redraw, changing only CSS display status
                onLoad={() => { setIsLoaded(true) }} />
            </>)
    }
      */

   
   /*
   useEffect(() => {  
    document.querySelector('#rootDivA').addEventListener('click', doClick)
   ...
  }, []); 
  function doClick(zz) { console.log('click'); zz.target.removeEventListener('click', doClick)}
  function doDrag() { console.log('drag')}
  */