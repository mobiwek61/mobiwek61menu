import React, { useEffect, useRef, useState, useCallback } from 'react';
// import { TransformWrapper, TransformComponent } from "react-zoom-pan-pinch";// "^3.1.0",
import QuickPinchZoom, { make3dTransformValue } from "react-quick-pinch-zoom";
import { GlowingInfo } from '../util/SvgAndFontHelper';
import { Popup_descrip_qr_scrollTips } from '../util/Popup_descrip_qr_scrollTips';
import { eatZoomGesture } from '../mobiwekMenu/mobiwekUtils';
import { MobiWekPageWrapper } from '../mobiwekView/MobiWekPageWrapper'

/**
 * This control handles an image to be displayed. It also shows an info icon which invokes a popup when pressed.
 * @param {*} mwmkeyLeaf element of the menu tree of the application. Typically mobiwekMenuJSONexample
 * @returns 
 */
function MediaPictureWithInfo(mwmkeyLeaf) {
      const preloadImage = new Image();
      preloadImage.src = '/jpeg/farmersmkt/jalepenos.jpg' // shows while loading
      var scrnIsPortrait = (window.innerHeight - window.innerWidth > 0) ? true : false;
      const screenScalerFactor = parseInt(getComputedStyle(document.body).getPropertyValue('--mwmMenuScrnScaler')) 
      /**
          * Calculates image dimensions according to these values of **mwmtype** :
          *   - handwriting always takes full screen width, flush to top
          *   - image takes full width if wider proportion than screen, else full height.
          * @param {*} (object) imgWH original IMAGE width/height structure
          * @param {*} winWH same for window
          * @param {*} winHeight window dimension
          * @param {*} mwmtype 'handwriting', 'image' ....
          * @returns structure having new image width, height and minimum zoom (may be < 0)
          */
         const fitToWidthHeight = (imgWH, winWH, mwmtype) => {
            // JSDoc uses below declaration to generate docs. Adding elements dynamically makes it weird out.
            var dims = { zoomDownForAllFit:1, width:-1, height:-1 }; 
            //dims.height = winWH.height/2
            //return dims;
            // SAVE as example..looks absolutely useless...     let { width } = winWH; console.log('"destructured object": ' + width)
            const doesImageTakeFullWidth = ((imgWH.width/imgWH.height - winWH.width/ winWH.height) > 0)
            if (mwmtype === 'handwriting') {  
               // handwriting always shown full width to facilitate reading it
               dims.width =  winWH.width;
               // calculate new scaled height of image. May be taller than window requiring scrolling
               dims.height = ( winWH.width / imgWH.width) * imgWH.height;  
               dims.zoomDownForAllFit = // calculate zoom factor to view entire image without scrolling
                  (doesImageTakeFullWidth) ?  winWH.width/dims.width :  winWH.height/dims.height;
               // SAVE document.querySelector('#debugMsgMobile').append('zoom ' + dims.zoomDownForAllFit)
            } else if ((imgWH.width/imgWH.height) -  winWH.width/ winWH.height > 0) {
               // image ratio wider than window so show full width
               dims.width = winWH.width;  // image takes full width
               dims.height = ( winWH.width / imgWH.width) * imgWH.height;
            } else {
               // image ratio narrower than window so show full height
               dims.height = winWH.height;  // image takes full height
               dims.width = ( winWH.height / imgWH.height) * imgWH.width;
            } 
            return dims
         }


      return(
         <div id='mobiwekViewComponent' className='noZoomPageW'
              style={{ height:'inherit', zIndex:'0', top: '0px', gridArea:'1/1/2/2'
                    // ,border:'3px solid red'
              }} >
            <CreateRZPPimageWithPreloadStandIn 
               preload={preloadImage} imgSrcUrl={mwmkeyLeaf.imgurl} mwmtype={mwmkeyLeaf.mwmtype} /> 
            {/* for putting message on mobile screen for debug. comment out... */}
            {/* SAVE...  <div id='debugMsgMobile' style={{ position:'absolute', top:'90px', backgroundColor:'#ffffbb',  
            height:'max-content', fontSize:'22px', zIndex:200, color:'black'}} /> */}
         </div>);
      
        
   function finalImageLoaded(theSrc, finalDims) {
      return <img id='finalImageLoaded' src={theSrc} 
      // TODO: can't I just show the image object direct without src= ?
      style={{  width:finalDims.width + 'px',
               height:finalDims.height + 'px'
            }} alt='alt text'
      />
   }

   /**
       * ImgDivWithInfoBtn
       * typically called twice, once upon initial page load and again when image is loaded 
       * and setState() thing gets set and causes component refresh.
       * @param props.theImgObject  image object to be displayed
       * @returns npmjs.com react-zoom-pan-pinch with image, or blank.
       */
      // try css dvh instead of vh
   function ImgDivWithInfoBtn(props) {
      
      // useEffect(() => { 
      //    /* same thing is done in ancestor component, however it's useEffect doesnt get fired 
      //       when this component re-renders, so it must be done again */
      //    document.querySelectorAll('.eatZoomGesture').forEach((bbb) => { 
      //       eatZoomGesture(bbb)})
      //    //document.querySelector('#debugMsgMobile').append('asfsaf')
      // }); // , []); // [] empty: run only once when component mounts like componentDidMoun
      const transformComponentRef = useRef();// useRef<ReactZoomPanPinchRef | null>(null);
      const [isInfoPopupOpen, setIsInfoPopupOpen] = useState(false);
      if (props.theImgObject == null) return(<></>) // image not loaded yet so show nothing
      else {
        /* we need to calculate the image size and postion. Depends on aspect ratio of image and screen (is
           it landscape or not). Since the dom is not yet rendered, can't get dimensions of parent. Instead
           use dimensions of window, may need to flub a bit.
           Setup TransformComponent below using attribute initialPositionX='123' */
        var finalDims = fitToWidthHeight(
            // brackets is es6 way of "struct" etc. 
            {width: props.theImgObject.width, height: props.theImgObject.height}, // image
            {width:window.innerWidth, height:window.innerHeight}, // window
            props.mwmtype // if handwriting, dimension differently etc
            );
        // nope...  var testImg = props.theImgObject; testImg.style.width='100vw'; testImg.style.height='auto';
        return(
        <div id='final_RZPP' style={{ 
               display:'block',
               width:'100%', 
               //height:'100%',
               height:window.innerHeight + 'px'
               // if border change width etc...  border:'4px solid #ff0000', width:'calc(100% - 8px)', height:'calc(100% - 8px)'
               }}>
        <div id='pgRefreshDragDownMask' className='eatZoomGesture'
             /* image zoom/scroll prevents normal page reload-drag gesture. 
                Preventing at top of screen using this div to eat the event instead.
                Note it's zIndex z-index is between the menu and the screen content.  */
             style={{ position:'absolute', width:'100%', height:'20%', zIndex:'25'}} 
        />
         <Popup_descrip_qr_scrollTips /* this popup shows description of image, qr and scroll tips */
            txtdesc={ props.txtdesc }
            isVisible={ isInfoPopupOpen } 
            callBackCloseMe={(isOpen)=> { setIsInfoPopupOpen(isOpen) } } />
         <div id='ginfo' className='eatZoomGesture'> {/* glowing  icon at bottom left. It must not pass zoom gesture to browser */}
            <GlowingInfo 
               // onClick changes useState() thing & triggers re-render to show dialog
               onClick={ () => { setIsInfoPopupOpen(true) }}
               fontSize={screenScalerFactor/10 + 'px'} />
         </div>
         < DoQuickPinchZoom finalDims={ finalDims } theImgObject={ props.theImgObject } />
         {/* style={{ border:'5px solid red'}} */}
   </div>
)}}

      function DoQuickPinchZoom(zzz) {
         const imgRef = useRef();
         const onUpdate = useCallback(({ x, y, scale }) => {
            imgRef.current.style.setProperty("transform", make3dTransformValue({ x, y, scale }));
            console.log('y ' + y)
          }, []);
          
         return (
            <QuickPinchZoom 
               onUpdate={onUpdate} maxZoom={20} minZoom={1}
               enforceBoundsDuringZoom={false}
               //tapZoomFactor={2} //zoomOutFactor={4}
            >
            <div id='imgDiv2' ref={imgRef} style={{ height:'200px', border:'5px solid green', height:'auto'}}>
               <img id='finalImageLoaded'  src={zzz.theImgObject.src} 
                     style={{  width:zzz.finalDims.width + 'px',
                              height:zzz.finalDims.height + 'px'
                           }} alt='alt text'
               /> 
            </div>
            </QuickPinchZoom>
         )
      }

      /**
       * This Component shows preload while final image loads. When loaded, does switchover, avoiding 
       *    the windowshade loading effect.
       * @param preload small image displayed while primaryImage loads
       * @param imgSrcUrl final image may take some time to load
       * @param mwmtype values: 'image', 'handwriting' so far. 
       *                'handwriting' causes initial image size to fill width in landscape mode to ease reading of handwriting
       */
      // const CreateRZPPimageWithPreloadStandIn = (props) => {
      function CreateRZPPimageWithPreloadStandIn(props) {
          var ref_preloadImg = useRef();
          const [theImgObj_state, setTheImgObj_state] = useState(null);
          const borderWidth = 0;
          const slowTimeDelay = 0;
          if (theImgObj_state == null) {
            var imgToLoad;
            imgToLoad = new Image();
            imgToLoad.src = props.imgSrcUrl; // imgA.style='width:90vmin';
            // console.log('starting load: ' + props.imgSrcUrl + ' |||||||||||||||||||||||||||||||||||||||||||')
            imgToLoad.addEventListener("load", (event) => {  
               setTimeout(() => { // ONLY FOR TESTING TO SIMULATE SLOW LOAD
                  // console.log('image loaded ++++++++++++++++++++++++++++++++++++++++++++++++++')
                  ref_preloadImg.current.style.display='none'; /* hide the preload and .. */
                  // setting state object causes ImgDivWithInfoBtn to reload with new image
                  setTheImgObj_state(imgToLoad) 
               }, slowTimeDelay)
            })
          }
          return <><img ref={ref_preloadImg} src={props.preload.src} 
                        style={{ 
                           // border:borderWidth + 'px dotted ' + (scrnIsPortrait ? 'red': '#00ff00'),
                           width:(scrnIsPortrait ? '100%': 'fit-content'),
                           // below ie:   calc(100% - 8px);
                           height:(scrnIsPortrait ? 'fit-content':'calc(100% - ' + (borderWidth * 2) + 'px)')
                        }} alt='alt text' />
                   <div className='blockyMsg textShadowA' 
                        style={{position:'absolute', top:'15vh', backgroundColor:'#cccccc77', width:'80vw', overflow:'auto'}}>
                     { // console.log('theImgObj_state: ' + theImgObj_state + ' loading url: ' + props.imgSrcUrl + ((slowTimeDelay > 0) ? ' debug delay: ' + slowTimeDelay: '') ) 
                     } 
                   </div> 
                   {/* below component refreshes when theImgObject changes. 
                       On initial refresh its null, so shows nothing */}
                   <ImgDivWithInfoBtn theImgObject={theImgObj_state} txtdesc={ mwmkeyLeaf.txtdesc } mwmtype={props.mwmtype} />
                   {/* <img src='/jpeg/hist/aerospace/X-15_flying.jpg' /> */}
                 </>
      }
    }

         /* LOOK AT THIS! How to create a React component in java code! 
               var newImg = ImgCallback({ src: domImage_state, callBackMoose: imgCB })
               this does not run unless { newImg } is in the JSX  */
      
         
    export { MediaPictureWithInfo }

    //   destructuring assignment
